import streamlit as st
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
from PIL import Image, ImageOps, ImageFilter
import matplotlib.pyplot as plt

# Load the trained CNN model
MODEL_PATH = 'fashion_cnn_trained.h5'
try:
    model = load_model(MODEL_PATH)
except Exception as e:
    st.error(f"‚ùå Error loading model: {str(e)}")
    st.info("üí° Please run the training notebook first to generate the model file.")
    st.stop()

# Class names for the Fashion MNIST dataset (10 classes)
class_names = ['√Åo thun', 'Qu·∫ßn d√†i', '√Åo len', 'V√°y', '√Åo kho√°c',
               'Gu·ªëc', '√Åo s∆° mi', 'Gi√†y sneaker', 'T√∫i', '·ª¶ng']

# ============================
# FMNIST Preprocess Utilities
# ============================
def fmnist_preprocess(image, out_size=28, obj_max=22, inv=True, normalize='unit'):
    """
    Ti·ªÅn x·ª≠ l√Ω 1 ·∫£nh ƒë·ªÉ m√¥ ph·ªèng ph√¢n ph·ªëi Fashion-MNIST.
    - image: PIL Image object (RGB ho·∫∑c L)
    - out_size: k√≠ch th∆∞·ªõc khung cu·ªëi (28)
    - obj_max: k√≠ch th∆∞·ªõc t·ªëi ƒëa ƒë·∫∑t v·∫≠t th·ªÉ v√†o (ƒë·ªÉ l·∫°i vi·ªÅn gi·ªëng MNIST)
    - inv: True -> v·∫≠t th·ªÉ s√°ng tr√™n n·ªÅn ƒëen
    - normalize: 'unit' -> /255
    Tr·∫£ v·ªÅ: m·∫£ng numpy float32 shape (28,28)
    """
    # Convert to grayscale if needed
    if image.mode != 'L':
        img = image.convert("L")
    else:
        img = image
    
    arr = np.array(img)

    # T√°ch n·ªÅn tr·∫Øng: ch·ªçn v√πng t·ªëi h∆°n n·ªÅn
    mask = arr < 240
    if mask.sum() == 0:
        mask = arr < 250

    # N·∫øu kh√¥ng t√¨m th·∫•y v·∫≠t th·ªÉ (to√†n b·ªô l√† n·ªÅn tr·∫Øng)
    if mask.sum() == 0:
        # S·ª≠ d·ª•ng to√†n b·ªô ·∫£nh
        cropped = img
    else:
        ys, xs = np.where(mask)
        y0, y1 = ys.min(), ys.max() + 1
        x0, x1 = xs.min(), xs.max() + 1
        cropped = Image.fromarray(arr[y0:y1, x0:x1])

    # L√†m m∆∞·ª£t nh·∫π ƒë·ªÉ gi·∫£m rƒÉng c∆∞a khi resize
    cropped = cropped.filter(ImageFilter.GaussianBlur(radius=0.5))

    # Invert cho gi·ªëng FMNIST (foreground s√°ng, background t·ªëi)
    if inv:
        cropped = ImageOps.invert(cropped)

    # Resize gi·ªØ t·ªâ l·ªá v√† pad v√†o khung 28x28
    cropped.thumbnail((obj_max, obj_max), Image.Resampling.LANCZOS)
    w, h = cropped.size
    canvas = Image.new("L", (out_size, out_size), color=0)  # n·ªÅn ƒëen
    canvas.paste(cropped, ((out_size - w) // 2, (out_size - h) // 2))

    # TƒÉng t∆∞∆°ng ph·∫£n nh·∫π
    canvas = ImageOps.autocontrast(canvas, cutoff=1)

    x = np.array(canvas).astype("float32")
    if normalize == 'unit':
        x = x / 255.0
    return x  # (28,28)

# Function to preprocess the uploaded image
def preprocess_image(image, use_advanced=True):
    """
    Ti·ªÅn x·ª≠ l√Ω ·∫£nh upload v·ªõi 2 ph∆∞∆°ng ph√°p:
    - Simple: resize ƒë∆°n gi·∫£n
    - Advanced: s·ª≠ d·ª•ng fmnist_preprocess ƒë·ªÉ x·ª≠ l√Ω ·∫£nh n·ªÅn tr·∫Øng t·ªët h∆°n
    """
    if use_advanced:
        # S·ª≠ d·ª•ng advanced preprocessing
        processed_array = fmnist_preprocess(image)
        processed_image = Image.fromarray((processed_array * 255).astype(np.uint8))
        image_array = processed_array.reshape(1, 28, 28, 1)
    else:
        # Simple preprocessing (ph∆∞∆°ng ph√°p c≈©)
        image = image.resize((28, 28))  # Resize to 28x28
        image = image.convert('L')  # Convert to grayscale
        image_array = np.array(image) / 255.0  # Normalize pixel values
        image_array = image_array.reshape(1, 28, 28, 1)  # Add batch and channel dimensions
        processed_image = image
    
    return image_array, processed_image

# Streamlit app
st.title("üîç ·ª®ng d·ª•ng Nh·∫≠n d·∫°ng Th·ªùi trang")
st.write("T·∫£i l√™n m·ªôt h√¨nh ·∫£nh ƒë·ªÉ ki·ªÉm tra d·ª± ƒëo√°n c·ªßa m√¥ h√¨nh.")

# Preprocessing method selection
st.sidebar.title("‚öôÔ∏è T√πy ch·ªçn Ti·ªÅn x·ª≠ l√Ω")
use_advanced = st.sidebar.checkbox("S·ª≠ d·ª•ng Ti·ªÅn x·ª≠ l√Ω N√¢ng cao", value=True, 
                                   help="Ti·ªÅn x·ª≠ l√Ω n√¢ng cao ho·∫°t ƒë·ªông t·ªët h∆°n v·ªõi ·∫£nh c√≥ n·ªÅn tr·∫Øng")

# File uploader for image input
uploaded_file = st.file_uploader("Ch·ªçn m·ªôt t·ªáp h√¨nh ·∫£nh", type=["png", "jpg", "jpeg"])

if uploaded_file is not None:
    # Display the uploaded image
    image = Image.open(uploaded_file)
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("### üñºÔ∏è H√¨nh ·∫£nh G·ªëc:")
        st.image(image, caption="H√¨nh ·∫£nh ƒë∆∞·ª£c t·∫£i l√™n", use_container_width=True)

    # Preprocess the image
    preprocessed_image, processed_image = preprocess_image(image, use_advanced)

    # Display the preprocessed image
    with col2:
        st.write("### ‚ö° H√¨nh ·∫£nh ƒê√£ x·ª≠ l√Ω:")
        method_text = "N√¢ng cao" if use_advanced else "ƒê∆°n gi·∫£n"
        st.image(processed_image, caption=f"H√¨nh ·∫£nh ƒë√£ x·ª≠ l√Ω - {method_text} (28x28)", use_container_width=True)

    # Make prediction
    prediction = model.predict(preprocessed_image)
    predicted_class = np.argmax(prediction)
    confidence = np.max(prediction)

    # Display the prediction
    st.write("### üéØ D·ª± ƒëo√°n:")
    st.write(f"M√¥ h√¨nh d·ª± ƒëo√°n ƒë√¢y l√†: **{class_names[predicted_class]}**")
    st.write(f"ƒê·ªô tin c·∫≠y: **{confidence:.2%}**")

    # Display the prediction probabilities as a bar chart
    st.write("### üìä X√°c su·∫•t D·ª± ƒëo√°n:")
    fig, ax = plt.subplots(figsize=(12, 6))  # TƒÉng k√≠ch th∆∞·ªõc ƒë·ªÉ ch·ª©a 10 classes
    bars = ax.bar(range(len(class_names)), prediction[0], 
                  color=['green' if i == predicted_class else 'skyblue' for i in range(len(class_names))])
    ax.set_xticks(range(len(class_names)))
    ax.set_xticklabels(class_names, rotation=45, ha="right")
    ax.set_ylabel("X√°c su·∫•t")
    ax.set_title("X√°c su·∫•t c√°c L·ªõp")
    ax.set_ylim(0, 1)
    
    # Add percentage labels on bars
    for i, bar in enumerate(bars):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + 0.01,
                f'{height:.1%}', ha='center', va='bottom')
    
    plt.tight_layout()
    st.pyplot(fig)
    
    # Show preprocessing comparison if advanced is used
    if use_advanced:
        st.write("### üîÑ So s√°nh Ti·ªÅn x·ª≠ l√Ω:")
        st.write("**Ti·ªÅn x·ª≠ l√Ω n√¢ng cao** gi√∫p v·ªõi:")
        st.write("- ‚úÖ H√¨nh ·∫£nh c√≥ n·ªÅn tr·∫Øng")
        st.write("- ‚úÇÔ∏è T·ª± ƒë·ªông c·∫Øt ƒë·ªëi t∆∞·ª£ng")
        st.write("- üîÑ ƒê·∫£o ng∆∞·ª£c m√†u s·∫Øc ƒë·ªÉ ph√π h·ª£p v·ªõi phong c√°ch Fashion-MNIST (n·ªÅn t·ªëi, ƒë·ªëi t∆∞·ª£ng s√°ng)")
        st.write("- ‚ö° C·∫£i thi·ªán ƒë·ªô t∆∞∆°ng ph·∫£n v√† cƒÉn gi·ªØa t·ªët h∆°n")